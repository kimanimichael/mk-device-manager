// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: messages.sql

package sqlcdatabase

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages(id, created_at, payload, device_uid)
VALUES($1, $2, $3, $4
      )
    RETURNING id, created_at, payload, device_uid
`

type CreateMessageParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	Payload   json.RawMessage
	DeviceUid string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ID,
		arg.CreatedAt,
		arg.Payload,
		arg.DeviceUid,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Payload,
		&i.DeviceUid,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessageByDeviceUID = `-- name: GetMessageByDeviceUID :one
SELECT id, created_at, payload, device_uid FROM messages WHERE device_uid = $1
`

func (q *Queries) GetMessageByDeviceUID(ctx context.Context, deviceUid string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByDeviceUID, deviceUid)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Payload,
		&i.DeviceUid,
	)
	return i, err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, created_at, payload, device_uid FROM messages WHERE id = $1
`

func (q *Queries) GetMessageByID(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageByID, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Payload,
		&i.DeviceUid,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, created_at, payload, device_uid FROM messages
ORDER BY created_at ASC
`

func (q *Queries) GetMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Payload,
			&i.DeviceUid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesCount = `-- name: GetMessagesCount :one
SELECT COUNT(*) AS total FROM messages
`

func (q *Queries) GetMessagesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMessagesCount)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getPagedMessages = `-- name: GetPagedMessages :many
SELECT id, created_at, payload, device_uid FROM messages ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type GetPagedMessagesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetPagedMessages(ctx context.Context, arg GetPagedMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getPagedMessages, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Payload,
			&i.DeviceUid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

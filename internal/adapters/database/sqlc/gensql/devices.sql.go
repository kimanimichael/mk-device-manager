// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: devices.sql

package sqlcdatabase

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices(id, created_at, updated_at, uid, serial)
VALUES($1, $2, $3, $4, $5
      )
    RETURNING id, created_at, updated_at, uid, serial
`

type CreateDeviceParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Uid       string
	Serial    string
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, createDevice,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Uid,
		arg.Serial,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uid,
		&i.Serial,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const getDeviceByID = `-- name: GetDeviceByID :one
SELECT id, created_at, updated_at, uid, serial FROM devices WHERE id = $1
`

func (q *Queries) GetDeviceByID(ctx context.Context, id uuid.UUID) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByID, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uid,
		&i.Serial,
	)
	return i, err
}

const getDeviceBySerial = `-- name: GetDeviceBySerial :one
SELECT id, created_at, updated_at, uid, serial FROM devices WHERE serial = $1
`

func (q *Queries) GetDeviceBySerial(ctx context.Context, serial string) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceBySerial, serial)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uid,
		&i.Serial,
	)
	return i, err
}

const getDeviceByUID = `-- name: GetDeviceByUID :one
SELECT id, created_at, updated_at, uid, serial FROM devices WHERE uid = $1
`

func (q *Queries) GetDeviceByUID(ctx context.Context, uid string) (Device, error) {
	row := q.db.QueryRowContext(ctx, getDeviceByUID, uid)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Uid,
		&i.Serial,
	)
	return i, err
}

const getDevices = `-- name: GetDevices :many
SELECT id, created_at, updated_at, uid, serial FROM devices
ORDER BY created_at ASC
`

func (q *Queries) GetDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Uid,
			&i.Serial,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesCount = `-- name: GetDevicesCount :one
SELECT COUNT(*) AS total FROM devices
`

func (q *Queries) GetDevicesCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDevicesCount)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getPagedDevices = `-- name: GetPagedDevices :many
SELECT id, created_at, updated_at, uid, serial FROM devices ORDER BY created_at DESC
OFFSET $1 LIMIT $2
`

type GetPagedDevicesParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) GetPagedDevices(ctx context.Context, arg GetPagedDevicesParams) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, getPagedDevices, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Uid,
			&i.Serial,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
